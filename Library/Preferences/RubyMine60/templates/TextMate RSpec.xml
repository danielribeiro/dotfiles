<?xml version="1.0" encoding="UTF-8"?>
<templateSet group="TextMate RSpec">
  <template name="anr" value="and_raise($VARIABLE_1$)" description="and_raise" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="exception" alwaysStopAt="true" />
    <context />
  </template>
  <template name="anrb" value="and_return { $VARIABLE_1$ }" description="and_return with block" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="anra" value="and_return($VARIABLE_1$)" description="and_return with args" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="value" alwaysStopAt="true" />
    <context />
  </template>
  <template name="ant" value="and_throw($VARIABLE_1$)" description="and_throw" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="sym" alwaysStopAt="true" />
    <context />
  </template>
  <template name="any" value="and_yield($VARIABLE_1$)" description="and_yield" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="values" alwaysStopAt="true" />
    <context />
  </template>
  <template name="annot" value="any_number_of_times" description="any_number_of_times" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="atl" value="at_least($VARIABLE_1$).times" description="at_least" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="n" alwaysStopAt="true" />
    <context />
  </template>
  <template name="atm" value="at_most($VARIABLE_1$).times" description="at_most" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="n" alwaysStopAt="true" />
    <context />
  </template>
  <template name="con" value="context &quot;$VARIABLE_1$&quot; do&#10;  $END$&#10;end" description="context" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="context" alwaysStopAt="true" />
    <context />
  </template>
  <template name="desc" value="require File.expand_path(File.dirname(__FILE__) + '/../spec_helper')&#10;&#10;describe $VARIABLE_1$ do&#10;  $END$&#10;end" description="describe (Controller)" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="controller" alwaysStopAt="true" />
    <context />
  </template>
  <template name="desrc" value="describe $VARIABLE_1$, &quot;$VARIABLE_2$ $VARIABLE_3$$VARIABLE_4$&quot; do&#10;  $END$&#10;end" description="describe (RESTful Controller)" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="controller" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="GET|POST|PUT|DELETE" alwaysStopAt="true" />
    <variable name="VARIABLE_3" expression="" defaultValue="/some/path" alwaysStopAt="true" />
    <variable name="VARIABLE_4" expression="" defaultValue=" with some parameters" alwaysStopAt="true" />
    <context />
  </template>
  <template name="des" value="describe &quot;$VARIABLE_1$&quot; do&#10;  $END$&#10;end" description="describe (String)" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="subject" alwaysStopAt="true" />
    <context />
  </template>
  <template name="dest" value="describe $VARIABLE_1$ do&#10;  $END$&#10;end" description="describe (type)" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="Type" alwaysStopAt="true" />
    <context />
  </template>
  <template name="dests" value="describe $VARIABLE_1$, &quot;$VARIABLE_2$&quot; do&#10;  $END$&#10;end" description="describe (type, string)" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="Type" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="description" alwaysStopAt="true" />
    <context />
  </template>
  <template name="ex" value="exactly($VARIABLE_1$).times" description="exactly" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="n" alwaysStopAt="true" />
    <context />
  </template>
  <template name="its" value="it 'should $VARIABLE_1$'$VARIABLE_2$" description="it (should do something)" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="do something" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue=" do   $END$ end" alwaysStopAt="true" />
    <context />
  </template>
  <template name="it" value="it '$VARIABLE_1$'$VARIABLE_2$" description="it (does something)" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="does something" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue=" do   $END$ end" alwaysStopAt="true" />
    <context />
  </template>
  <template name="matc" value="class $VARIABLE_1$&#10;  def initialize($VARIABLE_3$)&#10;    @$VARIABLE_3$ = $VARIABLE_3$&#10;  end&#10;&#10;  def matches?(actual)&#10;    @actual = actual&#10;    # Satisfy expectation here. Return false or raise an error if it's not met.&#10;    $VARIABLE_LAST$&#10;    true&#10;  end&#10;&#10;  def failure_message_for_should&#10;    &quot;expected #{@actual.inspect} to $VARIABLE_2$ #{@$VARIABLE_3$.inspect}, but it didn't&quot;&#10;  end&#10;&#10;  def failure_message_for_should_not&#10;    &quot;expected #{@actual.inspect} not to $VARIABLE_2$ #{@$VARIABLE_3$.inspect}, but it did&quot;&#10;  end&#10;end&#10;&#10;def $VARIABLE_2$($VARIABLE_3$)&#10;  $VARIABLE_1$.new($VARIABLE_3$)&#10;end" description="Matcher (Custom)" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="ReverseTo" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="reverse_to" alwaysStopAt="true" />
    <variable name="VARIABLE_3" expression="" defaultValue="expected" alwaysStopAt="true" />
    <variable name="VARIABLE_LAST" expression="" defaultValue="@actual.reverse.should == @$VARIABLE_3$" alwaysStopAt="true" />
    <context />
  </template>
  <template name="mat" value="Spec::Matchers.create $VARIABLE_1$ do |meringue|&#10;  match do |substance|&#10;    substance.looks_like?(meringue)&#10;  end&#10;end" description="Matcher (DSL)" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue=":look_like" alwaysStopAt="true" />
    <context />
  </template>
  <template name="moc" value="$VARIABLE_1$ = mock(&quot;$VARIABLE_2$&quot;$VARIABLE_3$)&#10;$END$" description="mock" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="var" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="mock_name" alwaysStopAt="true" />
    <variable name="VARIABLE_3" expression="" defaultValue=", :null_object =&gt; true" alwaysStopAt="true" />
    <context />
  </template>
  <template name="mm" value="mock_model($VARIABLE_1$)$END$" description="mock_model" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="model" alwaysStopAt="true" />
    <context />
  </template>
  <template name="mocw" value="Spec::Runner.configure do |config|&#10; config.mock_with :$VARIABLE_LAST$&#10;end" description="mock_with" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_LAST" expression="" defaultValue="mocha|flexmock|rr" alwaysStopAt="true" />
    <context />
  </template>
  <template name="on" value="once" description="once" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="resh" value="require File.dirname(__FILE__) + '/../spec_helper'" description="Require spec_helper" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="shbs" value="response.should be_success&#10;$END$" description="should be_success" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="shnbs" value="response.should_not be_success&#10;$END$" description="should_not be_success" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="conn" value="controller_name :$VARIABLE_1$" description="controller_name" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="controller" alwaysStopAt="true" />
    <context />
  </template>
  <template name="bef" value="before($VARIABLE_1$) do&#10;  $END$&#10;end" description="before" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue=":each" alwaysStopAt="true" />
    <context />
  </template>
  <template name="sh=" value="$VARIABLE_1$.should == $VARIABLE_2$&#10;$END$" description="should ==" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="value" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shm" value="$VARIABLE_1$.should match(/$VARIABLE_2$/)&#10;$END$" description="should match" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="regexp" alwaysStopAt="true" />
    <context />
  </template>
  <template name="she" value="$VARIABLE_1$.should equal($VARIABLE_2$)&#10;$END$" description="should equal" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="value" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shb" value="$VARIABLE_1$.should be($VARIABLE_2$)&#10;$END$" description="should be" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="result" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shbko" value="$VARIABLE_1$.should be_a_kind_of($VARIABLE_2$)&#10;$END$" description="should be_kind_of" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="klass" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shbio" value="$VARIABLE_1$.should_not be_instance_of($VARIABLE_2$)&#10;$END$" description="should_not be_instance_of" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="klass" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shbc" value="$VARIABLE_1$.should be_close($VARIABLE_2$, $VARIABLE_3$)&#10;$END$" description="should be_close" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="result" alwaysStopAt="true" />
    <variable name="VARIABLE_3" expression="" defaultValue="tolerance" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shbr" value="response.should be_redirect&#10;$END$" description="should be_redirect" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="shh" value="$VARIABLE_1$.should have($VARIABLE_2$).$VARIABLE_3$&#10;$END$" description="should have" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="num" alwaysStopAt="true" />
    <variable name="VARIABLE_3" expression="" defaultValue="things" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shhal" value="$VARIABLE_1$.should have_at_least($VARIABLE_2$).$VARIABLE_3$&#10;$END$" description="should have_at_least" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="num" alwaysStopAt="true" />
    <variable name="VARIABLE_3" expression="" defaultValue="things" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shham" value="$VARIABLE_1$.should have_at_most($VARIABLE_2$).$VARIABLE_3$&#10;$END$" description="should have_at_most" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="num" alwaysStopAt="true" />
    <variable name="VARIABLE_3" expression="" defaultValue="things" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shhr" value="$VARIABLE_1$.should have($VARIABLE_2$).records&#10;$END$" description="should have_records" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="x" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shn=" value="$VARIABLE_1$.should_not == $VARIABLE_2$&#10;$END$" description="should_not ==" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="value" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shnm" value="$VARIABLE_1$.should_not match(/$VARIABLE_2$/)&#10;$END$" description="should_not match" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="regexp" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shne" value="$VARIABLE_1$.should_not equal($VARIABLE_2$)&#10;$END$" description="should_not equal" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="value" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shnb" value="$VARIABLE_1$.should_not be($VARIABLE_2$)&#10;$END$" description="should_not be" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="result" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shkof" value="$VARIABLE_1$.should_not be_a_kind_of($VARIABLE_2$)&#10;$END$" description="should_not be_kind_of" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="klass" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shnbc" value="$VARIABLE_1$.should_not be_close($VARIABLE_2$, $VARIABLE_3$)&#10;$END$" description="should_not be_close" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="result" alwaysStopAt="true" />
    <variable name="VARIABLE_3" expression="" defaultValue="tolerance" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shnbr" value="response.should_not be_redirect&#10;$END$" description="should_not be_redirect" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="shnp" value="$VARIABLE_1$.should_not $VARIABLE_2$} $VARIABLE_4$&#10;$END$" description="should_not predicate" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="be_${3:predicate" alwaysStopAt="true" />
    <variable name="VARIABLE_4" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shnre" value="lambda { $VARIABLE_1$ }.should_not raise_error($VARIABLE_2$)&#10;$END$" description="should_not raise_error" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="error" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shnr" value="$VARIABLE_1$.should_not_receive(:$VARIABLE_2$)$VARIABLE_3$&#10;$END$" description="should_not_receive" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="mock" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="message" alwaysStopAt="true" />
    <variable name="VARIABLE_3" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shnrt" value="$VARIABLE_1$.should_not respond_to(:$VARIABLE_2$)&#10;$END$" description="should_not respond_to" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="sym" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shns" value="$VARIABLE_1$.should_not satisfy { |obj| $VARIABLE_2$ }&#10;$END$" description="should_not satisfy" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shnt" value="lambda { $VARIABLE_1$ }.should_not throw_symbol(:$VARIABLE_2$)&#10;$END$" description="should_not throw" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="symbol" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shp" value="$VARIABLE_1$.should $VARIABLE_2$} $VARIABLE_4$&#10;$END$" description="should predicate" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="be_${3:predicate" alwaysStopAt="true" />
    <variable name="VARIABLE_4" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shre" value="lambda { $VARIABLE_1$ }.should raise_error($VARIABLE_2$)&#10;$END$" description="should raise_error" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="error" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shr" value="$VARIABLE_1$.should_receive(:$VARIABLE_2$)$VARIABLE_3$&#10;$END$" description="should_receive" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="mock" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="message" alwaysStopAt="true" />
    <variable name="VARIABLE_3" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="wia" value="with($VARIABLE_1$)&#10;$END$" description="with args" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="args" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shrt" value="$VARIABLE_1$.should respond_to(:$VARIABLE_2$)&#10;$END$" description="should respond_to" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="sym" alwaysStopAt="true" />
    <context />
  </template>
  <template name="shs" value="$VARIABLE_1$.should satisfy { |obj| $VARIABLE_2$ }&#10;$END$" description="should satisfy" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="target" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="sht" value="lambda { $VARIABLE_1$ }.should throw_symbol(:$VARIABLE_2$)&#10;$END$" description="should throw" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VARIABLE_2" expression="" defaultValue="symbol" alwaysStopAt="true" />
    <context />
  </template>
  <template name="aft" value="after($VARIABLE_1$) do&#10;  $END$&#10;end" description="after" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_1" expression="" defaultValue=":each" alwaysStopAt="true" />
    <context />
  </template>
  <template name="tw" value="twice" description="twice" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
</templateSet>

